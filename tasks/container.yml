---
- block:
    - name: "Pull image {{ container[1].image }} for container {{ container[0] }}"
      when: container[1].state is not defined or
            container[1].state in ['restarted', 'started']
      containers.podman.podman_image:
        name: "{{ container[1].image }}"
        pull: true
      register: image_pull_result

    # wrapper for https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_container_module.html#ansible-collections-containers-podman-podman-container-module
    - name: "Create container {{ container[0] }}"
      containers.podman.podman_container:
        annotation: "{{ container[1].annotation | d(omit) }}"
        authfile: "{{ container[1].authfile | d(omit) }}"
        blkio_weight: "{{ container[1].blkio_weight | d(omit) }}"
        blkio_weight_device: "{{ container[1].blkio_weight_device | d(omit) }}"
        cap_add: "{{ container[1].cap_add | d(omit) }}"
        cap_drop: "{{ container[1].cap_drop | d(omit) }}"
        cgroup_parent: "{{ container[1].cgroup_parent | d(omit) }}"
        cgroupns: "{{ container[1].cgroupns | d(omit) }}"
        cgroups: "{{ container[1].cgroups | d(omit) }}"
        cidfile: "{{ container[1].cidfile | d(omit) }}"
        cmd_args: "{{ container[1].cmd_args | d(omit) }}"
        command: "{{ container[1].command | d(omit) }}"
        conmon_pidfile: "{{ container[1].conmon_pidfile | d(omit) }}"
        cpu_period: "{{ container[1].cpu_period | d(omit) }}"
        cpu_quota: "{{ container[1].cpu_quota | d(omit) }}"
        cpu_rt_period: "{{ container[1].cpu_rt_period | d(omit) }}"
        cpu_rt_runtime: "{{ container[1].cpu_rt_runtime | d(omit) }}"
        cpu_shares: "{{ container[1].cpu_shares | d(omit) }}"
        cpus: "{{ container[1].cpus | d(omit) }}"
        cpuset_cpus: "{{ container[1].cpuset_cpus | d(omit) }}"
        cpuset_mems: "{{ container[1].cpuset_mems | d(omit) }}"
        debug: "{{ container[1].debug | d(omit) }}"
        detach: "{{ container[1].detach | d(omit) }}"
        detach_keys: "{{ container[1].detach_keys | d(omit) }}"
        device: "{{ container[1].device | d(omit) }}"
        device_read_bps: "{{ container[1].device_read_bps | d(omit) }}"
        device_read_iops: "{{ container[1].device_read_iops | d(omit) }}"
        device_write_bps: "{{ container[1].device_write_bps | d(omit) }}"
        device_write_iops: "{{ container[1].device_write_iops | d(omit) }}"
        dns: "{{ container[1].dns | d(omit) }}"
        dns_option: "{{ container[1].dns_option | d(omit) }}"
        dns_search: "{{ container[1].dns_search | d(omit) }}"
        entrypoint: "{{ container[1].entrypoint | d(omit) }}"
        env: "{{ container[1].env | d(omit) }}"
        env_file: "{{ container[1].env_file | d(omit) }}"
        env_host: "{{ container[1].env_host | d(omit) }}"
        etc_hosts: "{{ container[1].etc_hosts | d(omit) }}"
        executable: "{{ container[1].executable | d(omit) }}"
        expose: "{{ container[1].expose | d(omit) }}"
        force_restart: "{{ container[1].force_restart | d(omit) }}"
        generate_systemd: "{{ container[1].generate_systemd | d(omit) }}"
        gidmap: "{{ container[1].gidmap | d(omit) }}"
        group_add: "{{ container[1].group_add | d(omit) }}"
        healthcheck: "{{ container[1].healthcheck | d(omit) }}"
        healthcheck_failure_action: "{{ container[1].healthcheck_failure_action | d(omit) }}"
        healthcheck_interval: "{{ container[1].healthcheck_interval | d(omit) }}"
        healthcheck_retries: "{{ container[1].healthcheck_retries | d(omit) }}"
        healthcheck_start_period: "{{ container[1].healthcheck_start_period | d(omit) }}"
        healthcheck_timeout: "{{ container[1].healthcheck_timeout | d(omit) }}"
        hooks_dir: "{{ container[1].hooks_dir | d(omit) }}"
        hostname: "{{ container[1].hostname | d(container[0]) }}"
        image: "{{ container[1].image | d(omit) }}"
        image_strict: "{{ container[1].image_strict | d(omit) }}"
        image_volume: "{{ container[1].image_volume | d(omit) }}"
        init: "{{ container[1].init | d(omit) }}"
        init_path: "{{ container[1].init_path | d(omit) }}"
        interactive: "{{ container[1].interactive | d(omit) }}"
        ip: "{{ container[1].ip | d(omit) }}"
        ipc: "{{ container[1].ipc | d(omit) }}"
        kernel_memory: "{{ container[1].kernel_memory | d(omit) }}"
        label: "{{ container[1].label | d(omit) }}"
        label_file: "{{ container[1].label_file | d(omit) }}"
        log_driver: "{{ container[1].log_driver | d('journald') }}"
        log_level: "{{ container[1].log_level | d(omit) }}"
        log_opt: "{{ container[1].log_opt | d(omit) }}"
        mac_address: "{{ container[1].mac_address | d(omit) }}"
        memory: "{{ container[1].memory | d(omit) }}"
        memory_reservation: "{{ container[1].memory_reservation | d(omit) }}"
        memory_swap: "{{ container[1].memory_swap | d(omit) }}"
        memory_swappiness: "{{ container[1].memory_swappiness | d(omit) }}"
        mount: "{{ container[1].mount | d(omit) }}"
        name: "{{ container[0] }}"
        network: "{{ container[1].network | d(omit) }}"
        network_alias: "{{ container[1].network_alias | d(omit) }}"
        no_hosts: "{{ container[1].no_hosts | d(omit) }}"
        oom_kill_disable: "{{ container[1].oom_kill_disable | d(omit) }}"
        oom_score_adj: "{{ container[1].oom_score_adj | d(omit) }}"
        pid: "{{ container[1].pid | d(omit) }}"
        pids_limit: "{{ container[1].pids_limit | d(omit) }}"
        pod: "{{ container[1].pod | d(use_pod) | d(omit) }}"
        privileged: "{{ container[1].privileged | d(omit) }}"
        publish: "{{ container[1].publish | d(omit) }}"
        publish_all: "{{ container[1].publish_all | d(omit) }}"
        read_only: "{{ container[1].read_only | d(omit) }}"
        read_only_tmpfs: "{{ container[1].read_only_tmpfs | d(omit) }}"
        recreate: "{{ container[1].recreate | d(omit) }}"
        requires: "{{ container[1].requires | d(omit) }}"
        restart_policy: "{{ container[1].restart_policy | d(omit) }}"
        rm: "{{ container[1].rm | d(omit) }}"
        rootfs: "{{ container[1].rootfs | d(omit) }}"
        sdnotify: "{{ container[1].sdnotify | d(omit) }}"
        secrets: "{{ container[1].secrets | d(omit) }}"
        security_opt: "{{ container[1].security_opt | d(omit) }}"
        shm_size: "{{ container[1].shm_size | d(omit) }}"
        sig_proxy: "{{ container[1].sig_proxy | d(omit) }}"
        state: "{{ container[1].state | d('restarted' if image_pull_result.changed else 'started') }}"
        stop_signal: "{{ container[1].stop_signal | d(omit) }}"
        stop_timeout: "{{ container[1].stop_timeout | d(omit) }}"
        subgidname: "{{ container[1].subgidname | d(omit) }}"
        subuidname: "{{ container[1].subuidname | d(omit) }}"
        sysctl: "{{ container[1].sysctl | d(omit) }}"
        systemd: "{{ container[1].systemd | d(omit) }}"
        timezone: "{{ container[1].timezone | d(omit) }}"
        tmpfs: "{{ container[1].tmpfs | d(omit) }}"
        tty: "{{ container[1].tty | d(omit) }}"
        uidmap: "{{ container[1].uidmap | d(omit) }}"
        ulimit: "{{ container[1].ulimit | d(omit) }}"
        user: "{{ container[1].user | d(omit) }}"
        userns: "{{ container[1].userns | d(omit) }}"
        uts: "{{ container[1].uts | d(omit) }}"
        volume: "{{ container[1].volume | d(omit) }}"
        volumes_from: "{{ container[1].volumes_from | d(omit) }}"
        workdir: "{{ container[1].workdir | d(omit) }}"
      register: out

#    - ansible.builtin.debug:
#        var: out
  tags: container
