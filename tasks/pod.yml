---
- name: "Stat data directory of pod {{ pod[0] }}"
  ansible.builtin.stat:
    path: "{{ pod[1].data_basedir }}/{{ pod[0] }}"
  register: image_dir_stats

- name: "Create data directory for pod {{ pod[0] }}"
  when: not image_dir_stats.stat.exists | d(false)
  block:
    - name: "Create data directory for pod {{ pod[0] }}"
      when: pod[1].zfs is not defined
      ansible.builtin.file:
        path: "{{ pod[1].data_basedir | d(data_basedir) }}/{{ pod[0] }}"
        state: directory

    - name: "Create ZFS dataset for pod {{ pod[0] }}"
      when: pod[1].zfs is defined
      vars:
        zfs:
          datasets:  >
            { '{{ pod[0] }}':
            { 'name': '{{ pod[1].zfs.pool }}/{{ pod[0] }}', 'state': 'present' } }
      ansible.builtin.import_role:
        name: sploenix.base.zfs

- name: "Create networks for pod {{ pod[0] }}"
  when: pod[1].networks is defined
  vars:
    use_pod: "{{ pod[0] }}"
  ansible.builtin.include_tasks: network.yml
  loop: "{{ pod[1].networks.items() }}"
  loop_control:
    loop_var: network

# wrapper around containers.podman.podman_pod
- name: "Create pod {{ pod[0] }}"
  containers.podman.podman_pod:
    add_host: "{{ pod[1].add_host | d(omit) }}"
    blkio_weight: "{{ pod[1].blkio_weight | d(omit) }}"
    blkio_weight_device: "{{ pod[1].blkio_weight_device | d(omit) }}"
    cgroup_parent: "{{ pod[1].cgroup_parent | d(omit) }}"
    cpu_shares: "{{ pod[1].cpu_shares | d(omit) }}"
    cpus: "{{ pod[1].cpus | d(omit) }}"
    cpuset_cpus: "{{ pod[1].cpuset_cpus | d(omit) }}"
    cpuset_mems: "{{ pod[1].cpuset_mems | d(omit) }}"
    debug: "{{ pod[1].debug | d(omit) }}"
    device: "{{ pod[1].device | d(omit) }}"
    device_read_bps: "{{ pod[1].device_read_bps | d(omit) }}"
    device_write_bps: "{{ pod[1].device_write_bps | d(omit) }}"
    dns: "{{ pod[1].dns | d(omit) }}"
    dns_opt: "{{ pod[1].dns_opt | d(omit) }}"
    dns_search: "{{ pod[1].dns_search | d(omit) }}"
    executable: "{{ pod[1].executable | d(omit) }}"
    generate_systemd: "{{ pod[1].generate_systemd | d(omit) }}"
    gidmap: "{{ pod[1].gidmap | d(omit) }}"
    hostname: "{{ pod[1].hostname | d(pod[0]) }}"
    infra: "{{ pod[1].infra | d(omit) }}"
    infra_command: "{{ pod[1].infra_command | d(omit) }}"
    infra_common_pidfile: "{{ pod[1].infra_common_pidfile | d(omit) }}"
    infra_image: "{{ pod[1].infra_image | d(omit) }}"
    infra_name: "{{ pod[1].infra_name | d(omit) }}"
    ip: "{{ pod[1].ip | d(omit) }}"
    label: "{{ pod[1].label | d(omit) }}"
    label_file: "{{ pod[1].label_file | d(omit) }}"
    mac_address: "{{ pod[1].mac_address | d(omit) }}"
    memory: "{{ pod[1].memory | d(omit) }}"
    memory_swap: "{{ pod[1].memory_swap | d(omit) }}"
    name: "{{ pod[0] }}"
    network: "{{ pod[1].network | d(omit) }}"
    network_alias: "{{ pod[1].network_alias | d(omit) }}"
    no_hosts: "{{ pod[1].no_hosts | d(omit) }}"
    recreate: "{{ pod[1].recreate | d(omit) }}"
    share: "{{ pod[1].share | d(omit) }}"
    state: "{{ pod[1].state | d(omit) }}"
    subgidname: "{{ pod[1].subgidname | d(omit) }}"
    subuidname: "{{ pod[1].subuidname | d(omit) }}"
    uidmap: "{{ pod[1].uidmap | d(omit) }}"
    userns: "{{ pod[1].userns | d(omit) }}"
    volume: "{{ pod[1].volume | d(omit) }}"
  register: out

#- ansible.builtin.debug:
#    var: out

- name: "Create containers for pod {{ pod[0] }}"
  when: pod[1].containers is defined
  vars:
    use_pod: "{{ pod[0] }}"
  ansible.builtin.include_tasks: container.yml
  loop: "{{ pod[1].containers.items() }}"
  loop_control:
    loop_var: container
